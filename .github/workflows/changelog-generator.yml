name: "Changelog Generator"

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify existing changelog comment
        id: check_existing_comment
        run: |
          COMMENTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          echo "$COMMENTS"
          if echo "$COMMENTS" | grep -q "ðŸŽ‰ Changelog Updated!"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git user
        if: steps.check_existing_comment.outputs.exists == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate input file from Git diff
        if: steps.check_existing_comment.outputs.exists == 'false'
        id: prepare_input
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          HEAD_REF="${{ github.event.pull_request.head.ref }}"

          git fetch origin "$HEAD_REF:$HEAD_REF"
          git checkout "$HEAD_REF"
          git fetch origin "$BASE_REF:$BASE_REF"
          git diff "origin/$BASE_REF" > "raw_diff.txt"

          echo "Pull Request Title: $PR_TITLE" > "Input.txt"
          echo "" >> "Input.txt"
          echo "Pull Request Description:" >> "Input.txt"
          echo "$PR_BODY" >> "Input.txt"
          echo "" >> "Input.txt"
          echo "Diff:" >> "Input.txt"
          cat "raw_diff.txt" >> "Input.txt"
          rm raw_diff.txt

          echo "INPUT_FILE=Input.txt" >> $GITHUB_ENV

      - name: Set up Python environment
        if: steps.check_existing_comment.outputs.exists == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        if: steps.check_existing_comment.outputs.exists == 'false'
        run: |
          python -m pip install openai
          python -m pip install requests

      - name: Generate changelog entry
        if: steps.check_existing_comment.outputs.exists == 'false'
        id: generate_changelog
        run: |
          PROMPT="You are tasked with generating concise, accurate, and well-structured changelog entries. Your output must follow the format: 'Category: #XXXX Brief description.' To achieve this, adhere to the following steps: Analyze the Git diff to determine the type of change ('Added,' 'Changed,' or 'Removed') based on the primary modifications. Extract the issue number from the PR title in the format '#XXXX.' If no issue number is found, use '#XXXX' as a placeholder. Write a brief, clear description summarizing the Git diff in 15 words or fewer. Use the PR title and description only as supplementary context to refine the summary. The output must be a single string without line breaks, backticks, apostrophes, or extra formatting. Use only letters, numbers, and the '#' character. Example: If the Git diff indicates a new feature, with a PR title 'Add login feature #1234' and description 'Implements a new OAuth-based login system,' the output should be: 'Added: #1234 Implemented OAuth-based login system.' Focus on precision, clarity, and adherence to these guidelines."
          INPUT_FILE="${{ env.INPUT_FILE }}"
          RESPONSE=$(python ./.github/OpenAi/OpenAi_File.py "${{ secrets.OPENAPIKEY }}" "$INPUT_FILE" "$PROMPT")
          echo "changelog_entry=$RESPONSE" >> $GITHUB_OUTPUT
          echo "OpenAI Response: $RESPONSE"
      - name: Apply changelog updates
        if: steps.check_existing_comment.outputs.exists == 'false' && steps.generate_changelog.outputs.changelog_entry != null
        run: |
          if [ -f ${{ env.INPUT_FILE }} ]; then rm ${{ env.INPUT_FILE }}; fi
          python ./.github/changelog/Changelog.py "${{ steps.generate_changelog.outputs.changelog_entry }}" "./CHANGELOG.md"
          git add CHANGELOG.md
          git commit -m "docs: update changelog"
          git push origin "${{ github.event.pull_request.head.ref }}"

      - name: Post changelog update comment
        uses: mshick/add-pr-comment@v2
        if: steps.check_existing_comment.outputs.exists == 'false'
        with:
          message: |
            ## ðŸŽ‰ Changelog Updated!
            The changelog has been successfully updated.
          allow-repeats: true
