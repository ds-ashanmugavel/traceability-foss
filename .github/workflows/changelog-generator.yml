name: "Changelog Generator"

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-comment:
    name: "Check for Existing Changelog Comment"
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Existing Changelog Comment
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENTS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          if echo "$COMMENTS" | grep -q "ðŸŽ‰ Changelog Updated!"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  fetch-input:
    name: "Fetch Input Data"
    needs: check-comment
    if: needs.check-comment.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      input_file: ${{ steps.extract.outputs.input_file }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Diff and PR Information
        id: extract
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          HEAD_REF="${{ github.event.pull_request.head.ref }}"

          git fetch origin "$HEAD_REF:$HEAD_REF"
          git checkout "$HEAD_REF"
          git fetch origin "$BASE_REF:$BASE_REF"
          git diff "origin/$BASE_REF" > raw_diff.txt

          echo "Pull Request Title: $PR_TITLE" > Input.txt
          echo "" >> Input.txt
          echo "Pull Request Description:" >> Input.txt
          echo "$PR_BODY" >> Input.txt
          echo "" >> Input.txt
          echo "Diff:" >> Input.txt
          cat raw_diff.txt >> Input.txt

          echo "input_file=Input.txt" >> $GITHUB_OUTPUT

      - name: Upload Input File
        uses: actions/upload-artifact@v4
        with:
          name: "Changelog Input File"
          path: Input.txt

  openai-request:
    name: "Generate Changelog Entry"
    needs: fetch-input
    runs-on: ubuntu-latest
    outputs:
      changelog_entry: ${{ steps.generate.outputs.changelog_entry }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --no-cache-dir openai requests

      - name: Generate Changelog Entry with OpenAI
        id: generate
        env:
          OPENAI_KEY: ${{ secrets.OPENAPIKEY }}
        run: |
          INPUT_FILE="${{ needs.fetch-input.outputs.input_file }}"
          PROMPT="You are tasked with creating a concise and strictly formatted changelog entry based on the input file, which contains Git diffs, Pull Request (PR) titles, and descriptions; the changelog entry must fit to the format ('Category: #XXXX Brief description.') where 'Category' is replaced with 'Added,' 'Changed,' or 'Removed' based on the nature of the change inferred primarily from the Git diff while using the PR title and description only for supplementary context, and the issue number is extracted from the PR title (format: #XXXX) or replaced with #XXXX as a placeholder if absent; the entire entry must not exceed 15 words, with a strict focus on the Git diff content to ensure precision, structure, and alignment with these rules. Use only # as a special character, otherwise use only letters and numbers. Ensure the response is a single string without line breaks, backticks, apostrophe or extra formatting."
          RESPONSE=$(python ./.github/OpenAi/OpenAi_File.py "$OPENAI_KEY" "$INPUT_FILE" "$PROMPT")
          echo "changelog_entry=$RESPONSE" >> $GITHUB_OUTPUT

  update-changelog:
    name: "Update Changelog"
    needs: openai-request
    runs-on: ubuntu-latest
    outputs:
      changelog_updated: ${{ steps.update.outputs.changelog_updated }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Changelog File
        id: update
        run: |
          RESPONSE="${{ needs.openai-request.outputs.changelog_entry }}"
          python ./.github/changelog/Changelog.py "$RESPONSE" "./CHANGELOG.md"
          git add CHANGELOG.md
          git commit -m "Update changelog"
          git push origin "${{ github.event.pull_request.head.ref }}"
          echo "changelog_updated=true" >> $GITHUB_OUTPUT

  add-comment:
    name: "Add PR Comment"
    needs: update-changelog
    if: needs.update-changelog.outputs.changelog_updated == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Add PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## ðŸŽ‰ Changelog Updated!
            The changelog has been successfully updated.
          allow-repeats: true
